apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply from: 'https://raw.githubusercontent.com/CKS-ROC/Useful_Gradle/master/version.gradle'

def android_builder_version = "3.5.3"
def android_builder_main_version = 3

android {
    this.rootProject.buildscript.configurations.classpath
            .resolvedConfiguration
            .firstLevelModuleDependencies.
            each {
                def name = it.name
                if (name.contains('com.android.tools.build:gradle')) {
                    def moduleVersion = it.moduleVersion
                    if (moduleVersion.contains("-")) {
                        def versionArray = moduleVersion.split("-")
                        version = versionArray[0]
                        alpha = versionArray[1]
                    } else {
                        version = moduleVersion
                        android_builder_version = moduleVersion
                        println "Android Builder Version : " + android_builder_version
                    }
                }
            }
    android_builder_main_version = Integer.parseInt(android_builder_version.split("\\.")[0])
    println "Android Builder Main Version : " + android_builder_main_version

    signingConfigs {
        release {
            storeFile file("./keystore/release.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }

    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    kapt {
        correctErrorTypes = true
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    //WARNING: DSL element 'android.dataBinding.enabled' is obsolete and has been replaced with 'android.buildFeatures.dataBinding'.
    if (android_builder_main_version < 4) {
        dataBinding {
            enabled = false
        }
    } else {
        buildFeatures {
            dataBinding false
            // for view binding:
            // viewBinding true
        }
    }
    androidExtensions {
        experimental = true
    }
//Ref : https://juejin.im/post/6844904004955144205
    lintOptions {
        disable 'MissingDefaultResource'
    }

    def getLocalIPv4 = { ->
        def ip4s = []
        NetworkInterface.getNetworkInterfaces().findAll {
            it.isUp() && !it.isLoopback() && !it.isPointToPoint() && !it.isVirtual() && !it.getName().startsWith("br-")
        }.each {
            it.getInetAddresses()
                    .findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
                    .each { ip4s << it }
        }
        int index = 0
        if (ip4s.size() == 0) index = 0 else index = ip4s.size() - 1
        String ip = ip4s[index].toString()
        return ip.substring(ip.indexOf('/') + 1, ip.length())
    }

    def version = this.ext.default_version()
    def gittag = getlastTAG()
    println "Show last git TAG : " + gittag
    if (!gittag.equals(version.versionName)) {
        if (gittag.contains(".")) {
            version.versionName = gittag.toString()
            def rawversioinfo = gittag.split("\\.")
            def len = rawversioinfo.length
            def prefixn = 1
            def apifeaturen = 0
            def buildn = 0
            def hotfixn = 0
            if (len < 4) {
                prefixn = rawversioinfo[len - len].toInteger()
//            println "Show prefixn : " + prefixn
                apifeaturen = rawversioinfo[len - len + 1].toInteger()
//            println "Show hotfixn : " + hotfixn
                buildn = rawversioinfo[len - len + 2].toInteger()
            } else {
                prefixn = rawversioinfo[len - len].toInteger()
//            println "Show prefixn : " + prefixn
                apifeaturen = rawversioinfo[len - len + 1].toInteger()
//            println "Show hotfixn : " + hotfixn
                buildn = rawversioinfo[len - len + 2].toInteger()
                hotfixn = rawversioinfo[len - len + 3].toInteger()
            }
            this.ext.syncversionandtag("", prefixn, apifeaturen, buildn, hotfixn)
            version = this.ext.default_version()
        } else {
            println "Show error !!! "
        }
    }

    defaultConfig {
        applicationId "com.dabenxiang.mimi"
        minSdkVersion 24
        //FIXME Note :  if use video-editor  & com.writingminds:FFmpegAndroid:0.3.2 the targetSdkVersion must below 28 if want over 29/30 (Android Q) change to branch dev_sub_FFmpegAndroid
        //FIXME : branch dev_sub_FFmpegAndroid submodule !!
        targetSdkVersion 30
        versionCode version.versionCode.toInteger()
        versionName version.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "API_HOST", '"http://api.vsense.dev-121.silkrode.io"'
        buildConfigField "String", "AD_API_HOST", '"http://api.promotion.dev-121.silkrode.io"'
        buildConfigField "String", "WEB_HOST", '"https://sit-video-web.ymmsp.com"'
        buildConfigField "String", "LOCAL_SOCKET_HOST", "\"${getLocalIPv4()}\""
        buildConfigField "int", "LOCAL_SOCKET_PORT", "8080"
        archivesBaseName = "$applicationName-v$versionName"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }

    buildTypes {
        debug {
            matchingFallbacks = ['release', 'debug']
            getIsDefault().set(true)
            zipAlignEnabled false
            minifyEnabled false
            debuggable true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            matchingFallbacks = ['release', 'debug']
            zipAlignEnabled true
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        prod_debug.initWith(buildTypes.debug)
        sit_debug.initWith(buildTypes.debug)
        dev_debug.initWith(buildTypes.debug)

        prod_release.initWith(buildTypes.release)
        sit_release.initWith(buildTypes.release)
        dev_release.initWith(buildTypes.release)

        prod_debug {}
        prod_release {}

        sit_debug {}
        sit_release {}

        dev_debug {}
        dev_release {}
    }

    flavorDimensions "normal"
    productFlavors {
        mimi {
            dimension = "normal"
            getIsDefault().set(true)
            ext {
                mqtt = [sit: "wss://mqtt.ymmsp.com:443", dev: "ws://10.1.1.121:8083", prod: "ws://10.1.1.121:8083"]
            }
        }
    }

//    //FIXME Ref : https://stackoverflow.com/questions/35478189/how-to-list-all-flavors-in-buildconfig-via-gradle-in-android
//        demo  manifestPlaceholders &  applicationIdSuffix
    productFlavors.all { flavor ->
        println "ProductFlavors Show flavor name " + flavor.name
//        flavor.manifestPlaceholders = [
//                PERMISSION_PREFIX: flavor.name,
//        ]
//
//        if (flavor.name != "mimi") {
//            flavor.applicationIdSuffix "." + flavor.name
//        }
    }

    variantFilter { variant ->
        def flavorName = variant.name
//        println "Show  flavorName !!  " + flavorName//
        def buildTypename = variant.buildType.name.toString()
//        println "Show  buildTypename !!  " + buildTypename//
        def isDev = buildTypename.contains("dev")
        if (buildTypename.equals('release') || buildTypename.equals('debug')) {
//            println "Show match  buildtype "+variant.buildType.name
            variant.setIgnore(true)
        }
    }

    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0]
        def flavorName = variant.flavorName
//        println "Show  flavorName !!  " + flavorName//
        def full_buildTypename = variant.buildType.name.toString()
//        println "Show  full_buildTypename !!  " + full_buildTypename
        def buildtype = full_buildTypename
        if (full_buildTypename.contains("_")) {
            buildtype = full_buildTypename.split("_")[0]
        }

        def flavor_version = this.ext.default_version(flavorName)
        println "Show " + flavorName + " current flavor_version versionName " + flavor_version.versionName
        println "Show " + flavorName + " current _version versionCode :   " + flavor_version.versionCode
//        def current_branch = gitBranch()
////        println "Show current_branch :   " + current_branch
//        if (full_buildTypename.equals("prod_release")) {
//            println "Show match  prod_release !!"
//            if (current_branch.equals("release") || current_branch.equals("master")) {
//                println "Show match git branch  release || master !!"
//                this.project.ext.increaseVersion(flavorName)
//                flavor_version = this.ext.default_version(flavorName)
//                commitVersionProperties(flavor_version.versionName)
//                setAndpushTag(flavor_version.versionName)
//                println "prod_release get " + flavorName + " new flavor_version versionName " + flavor_version.versionName
//                println "prod_release get " + flavorName + " new flavor_version versionCode :   " + flavor_version.versionCode
//            }
//        }
        variant.buildConfigField "String", "API_HOST", "\"${getAPI_Host(buildtype)}\""
        variant.buildConfigField "String", "AD_API_HOST", "\"${getAD_API_Host(buildtype)}\""
//        variant.buildConfigField "String", "MQTT_HOST", "\"${getMQTT_Host(buildtype)}\""
        variant.buildConfigField "String", "MQTT_HOST", "\"${flavor.ext.mqtt[buildtype]}\""
        //        //FIXME Cannot set readonly property: manifestPlaceholders for class: com.android.build.gradle.internal.api.ReadOnlyProductFlavor
//        flavor.manifestPlaceholders = [
//                PERMISSION_PREFIX: flavor.name,
//        ]
//        //FIXME Could not set unknown property 'manifestPlaceholders' for object of type com.android.build.gradle.internal.api.ApplicationVariantImpl.
//        manifestPlaceholders = [ PERMISSION_PREFIX: flavor.name ]
        variant.outputs.each { output ->
            output.versionNameOverride = flavor_version.versionName
            output.versionCodeOverride = flavor_version.versionCode.toInteger()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'LICENSE'
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/kotlinx-io.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-io.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
//        pickFirst 'lib/x86/libc++_shared.so'
//        pickFirst 'lib/x86_64/libc++_shared.so'
//        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
//        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }
}

project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = [
                "-Xjsr305=strict",
                "-progressive"
        ]
        jvmTarget = "1.8"
    }
}

def getAPI_Host(String buildtype) {
    def path = "http://api.vsense.dev-121.silkrode.io"
    switch (buildtype) {
        case "sit":
            path = "http://api.vsense.dev-121.silkrode.io"
            break
        case "dev":
            path = "http://api.vsense.dev-121.silkrode.io"
            break
        case "prod":
        default:
            break
    }
    return path
}

def getAD_API_Host(String buildtype) {
    def path = "http://api.promotion.dev-121.silkrode.io"
    switch (buildtype) {
        case "sit":
        case "dev":
        case "prod":
        default:
            break
    }
    return path
}

def getMQTT_Host(String buildtype) {
    def path = "ws://10.1.1.121:8083"
    switch (buildtype) {
        case "sit":
            path = "wss://mqtt.ymmsp.com:443"
            break
        case "dev":
            path = "ws://10.1.1.121:8083"
            break
        case "prod":
        default:
            break
    }
    return path
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

def commitVersionProperties(String tagName) {
    println("commit  version.properties ")
    def proc = "git add .".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    proc = "git commit -m \"[ Release ] Release v$tagName \"".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    proc = "git push --all".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
}

def setAndpushTag(String tagName) {
    println("Show tagname  = $tagName")
    def proc = "git tag v$tagName".execute()
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    proc = "git push --tags".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
}

def getlastTAG() {
    def proc = "git fetch --all ".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    def current = "1.0.0"
    println("Show tags")
    proc = "git tag ".execute()
    proc.in.eachLine { line ->
        line.replace("v", "")
        current = line.replace("v", "")
        println current
    }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    current
}

def isWithSubmoduleBranch() {
    if (gitBranch().contains("dev_sub")) {
        return true
    } else {
        return false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // AndroidX
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.activity:activity-ktx:$activity_ktx_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Lifecycle, ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // KTX Extensions
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_extensions_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ktx_extensions_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$ktx_extensions_version"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_interceptor_version"

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Koin
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.koin:koin-core-ext:$koin_version"
    implementation "org.koin:koin-java:$koin_version"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-scope:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "org.koin:koin-android-ext:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    implementation "org.koin:koin-androidx-ext:$koin_version"

    // Paging
    implementation "androidx.paging:paging-runtime:$paging_version"

    // LiveEventBus
    implementation "com.jeremyliao:live-event-bus-x:$live_event_bus_version"

    // Material Dialogs
    implementation "com.afollestad.material-dialogs:core:$material_dialogs_version"
    implementation "com.afollestad.material-dialogs:lifecycle:$material_dialogs_version"

    // ProgressHUD
    implementation "com.kaopiz:kprogresshud:$pogress_hud_version"

    // Switch Button
    implementation "com.kyleduo.switchbutton:library:$switch_button_version"

    // Swipe refresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh_layout_version"

    // CircleImageView
    implementation "de.hdodenhof:circleimageview:$circle_image_view_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Glide Transformations
    implementation "jp.wasabeef:glide-transformations:$glide_transformations_version"

    // WebSocket
    implementation "org.java-websocket:Java-WebSocket:$websocket_version"

    // MQTT
    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:$mqtt_version"
    implementation "org.eclipse.paho:org.eclipse.paho.android.service:$paho_service_version"

    // LocalBroadcastManager
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$local_broadcast_manager_version"

    // Security-Crypto
    implementation "androidx.security:security-crypto:$security_crypto_version"

    // Work
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // Ktor
    implementation "io.ktor:ktor-client-android:1.2.5"

    // Epoxy
    implementation "com.airbnb.android:epoxy:$epoxy_version"
    kapt "com.airbnb.android:epoxy-processor:$epoxy_version"

    // Viewpager2
    implementation "androidx.viewpager2:viewpager2:$viewpager2_version"
    implementation "com.to.aboomy:pager2banner:$pager2banner_version"

    // RoundedView
    implementation "com.github.yulichswift:RoundedViews:$rounded_views_version"

    // ExoPlayer
    implementation "com.google.android.exoplayer:exoplayer:$exoplayer_version"
    implementation "com.google.android.exoplayer:extension-rtmp:$exoplayer_version"

    // BaseRecyclerViewAdapterHelper
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:$base_recycler_view_adapter_helper_version"

    // Application Provider
    implementation "com.github.florent37:applicationprovider:$application_provider_version"

    // Stetho
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"
    implementation "com.facebook.stetho:stetho-js-rhino:$stetho_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Flurry
    implementation "com.flurry.android:analytics:$flurry_version"

    // AndroidUtilCode
    implementation "com.blankj:utilcodex:$utilcodex_version"

    // Conscrypt
    implementation "org.conscrypt:conscrypt-android:$conscrypt_version"

    // CKS

    implementation("org.cks.utils:BaseManager:$cks_manager")
    implementation "org.cks.utils:DeviceInfoProvider:$cks_provider"
    implementation "org.cks.utils:logmanager:$cks_log_version"
    implementation "org.cks.utils:utils_device:$cks_utils"
    implementation "org.cks.utils:utils_api_result:$cks_utils"
    implementation "org.cks.utils:utils_general:$cks_utils"
    implementation "org.cks.utils:utils_loglevel:$cks_utils"
    implementation "org.cks.utils:utils_gson_factory:$cks_utils"
    implementation "org.cks.utils:updatemanager:$cks_update_version"

    // Domain GoLib
    implementation project(path: ':domain_libs')

    // Video Editor
    implementation 'org.cks.ffmpeg:FFmpegAndroid:0.3.3'
    implementation project(path: ':video-editor')

    //Video compressor
    implementation project(path: ':videocompressor')

    // Test
    testImplementation "io.mockk:mockk:$mokk_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.koin:koin-test:$koin_version"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "androidx.paging:paging-common:$paging_version"
    testImplementation "androidx.arch.core:core-testing:$core_testing"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mock_webserver_version"
    androidTestImplementation "androidx.test:runner:$runner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "io.mockk:mockk-android:$mokk_version"
    androidTestImplementation "androidx.test:core:$android_test_version"
    androidTestImplementation "androidx.test:runner:$android_test_version"
    androidTestImplementation "androidx.test:rules:$android_test_version"
    androidTestImplementation "androidx.test.ext:junit:$android_test_ext_version"
}

task showCurrentVersion {
    group "version Tasks"
    this.project.ext.currentVersion("")
}

task increaseVersion {
    group "version Tasks"
    doLast {
        this.project.ext.increaseVersion("")
    }
}

task decreaseVersion {
    group "version Tasks"
    doLast {
        this.project.ext.decreaseVersion("")
    }
}