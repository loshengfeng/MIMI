apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

def android_builder_version = "3.5.3"
def android_builder_main_version = 3

android {
    this.rootProject.buildscript.configurations.classpath
            .resolvedConfiguration
            .firstLevelModuleDependencies.
            each {
                def name = it.name
                if (name.contains('com.android.tools.build:gradle')) {
                    def moduleVersion = it.moduleVersion
                    if (moduleVersion.contains("-")) {
                        def versionArray = moduleVersion.split("-")
                        version = versionArray[0]
                        alpha = versionArray[1]
                    } else {
                        version = moduleVersion
                        android_builder_version = moduleVersion
                        println "Android Builder Version : " + android_builder_version
                    }
                }
            }
    android_builder_main_version = Integer.parseInt(android_builder_version.split("\\.")[0])
    println "Android Builder Main Version : " + android_builder_main_version

    signingConfigs {
        release {
            storeFile file("./keystore/release.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }

    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    kapt {
        correctErrorTypes = true
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    //WARNING: DSL element 'android.dataBinding.enabled' is obsolete and has been replaced with 'android.buildFeatures.dataBinding'.
    if (android_builder_main_version < 4) {
        dataBinding {
            enabled = false
        }
    } else {
        buildFeatures {
            dataBinding false
            // for view binding:
            // viewBinding true
        }
    }
    androidExtensions {
        experimental = true
    }
//Ref : https://juejin.im/post/6844904004955144205
    lintOptions {
        disable 'MissingDefaultResource'
    }

    def getLocalIPv4 = { ->
        def ip4s = []
        NetworkInterface.getNetworkInterfaces().findAll {
            it.isUp() && !it.isLoopback() && !it.isPointToPoint() && !it.isVirtual() && !it.getName().startsWith("br-")
        }.each {
            it.getInetAddresses()
                    .findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
                    .each { ip4s << it }
        }
        int index = 0
        if (ip4s.size() == 0) index = 0 else index = ip4s.size() - 1
        String ip = ip4s[index].toString()
        return ip.substring(ip.indexOf('/') + 1, ip.length())
    }

    Version version = readVersion()
    defaultConfig {
        applicationId "com.dabenxiang.mimi"
        minSdkVersion 24
        //FIXME Note :  if use video-editor  & com.writingminds:FFmpegAndroid:0.3.2 the targetSdkVersion must below 28 if want over 29/30 (Android Q) change to branch dev_sub_FFmpegAndroid
        //FIXME : branch dev_sub_FFmpegAndroid submodule !!
        targetSdkVersion 30
        versionCode version.versionCode.toInteger()
        versionName version.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "API_HOST", '"http://api.vsense.dev-121.silkrode.io"'
        buildConfigField "String", "AD_API_HOST", '"http://api.promotion.dev-121.silkrode.io"'
        buildConfigField "String", "WEB_HOST", '"https://sit-video-web.ymmsp.com"'
        buildConfigField "String", "LOCAL_SOCKET_HOST", "\"${getLocalIPv4()}\""
        buildConfigField "int", "LOCAL_SOCKET_PORT", "8080"
        archivesBaseName = "$applicationName-v$versionName"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }

    buildTypes {
        debug {
            matchingFallbacks = ['release', 'debug']
            zipAlignEnabled false
            minifyEnabled false
            debuggable true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            matchingFallbacks = ['release', 'debug']
            zipAlignEnabled true
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        prod_debug.initWith(buildTypes.debug)
        sit_debug.initWith(buildTypes.debug)
        dev_debug.initWith(buildTypes.debug)

        prod_release.initWith(buildTypes.release)
        sit_release.initWith(buildTypes.release)
        dev_release.initWith(buildTypes.release)

        prod_debug {}
        prod_release {}

        sit_debug {}
        sit_release {}

        dev_debug {}
        dev_release {}
    }

    flavorDimensions "normal"
    productFlavors {
        mimi {
            dimension = "normal"
            ext {
                mqtt = [sit: "wss://mqtt.ymmsp.com:443", dev: "ws://10.1.1.121:8083", prod: "ws://10.1.1.121:8083"]
            }
        }
    }

    variantFilter { variant ->
        def flavorName = variant.name
//        println "Show  flavorName !!  " + flavorName//
        def buildTypename = variant.buildType.name.toString()
//        println "Show  buildTypename !!  " + buildTypename//
        def isDev = buildTypename.contains("dev")
        if (buildTypename.equals('release') || buildTypename.equals('debug')) {
//            println "Show match  buildtype "+variant.buildType.name
            variant.setIgnore(true)
        }
    }

    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0]
        def flavorName = variant.flavorName
//        println "Show  flavorName !!  " + flavorName//
        def full_buildTypename = variant.buildType.name.toString()
//        println "Show  full_buildTypename !!  " + full_buildTypename
        def buildtype = full_buildTypename
        if (full_buildTypename.contains("_")) {
            buildtype = full_buildTypename.split("_")[0]
        }

        Version flavor_version = readVersionWithPath(getVersionPropertiesPath(flavorName))
//        println "Show current flavor_version versionName " + flavor_version.versionName
//        println "Show current flavor_version versionCode :   " + flavor_version.versionCode
        def current_branch = gitBranch()
//        println "Show current_branch :   " + current_branch
        if (full_buildTypename.equals("prod_release") && (current_branch.equals("release") || current_branch.equals("master"))) {
            increaseVersionWithPath(getVersionPropertiesPath(flavorName))
            flavor_version = readVersionWithPath(getVersionPropertiesPath(flavorName))
            println "prod_release get new flavor_version versionName " + flavor_version.versionName
            println "prod_release get new flavor_version versionCode :   " + flavor_version.versionCode
        }
        variant.buildConfigField "String", "API_HOST", "\"${getAPI_Host(buildtype)}\""
        variant.buildConfigField "String", "AD_API_HOST", "\"${getAD_API_Host(buildtype)}\""
//        variant.buildConfigField "String", "MQTT_HOST", "\"${getMQTT_Host(buildtype)}\""
        variant.buildConfigField "String", "MQTT_HOST", "\"${flavor.ext.mqtt[buildtype]}\""
        variant.outputs.each { output ->
            output.versionNameOverride = flavor_version.versionName
            output.versionCodeOverride = flavor_version.versionCode.toInteger()
        }
    }

////Ref : https://blog.csdn.net/lbcab/article/details/72771729
////Android Studio在对变体目录和main目录进行资源合并时，会遵守这样的规则 某资源在free下有，在main中没有，那么在打包时，会将该资源直接合并到main资源中 某资源在free下有，在main中也有，那么在打包时，会以free为主，将free中资源替换掉main中资源。
////代码文件，顾名思义就是指java目录下的.java文件了，为什么代码叫整合，而资源却是合并呢？因为代码文件是没办法合并的，只能是整合，整合是什么意思？假设当前选中的变体是freeDebug，有一个java文件是Test.java，这个Test.java要么只存在free/java下，要么只存在于main/java下，如
////assets虽然是资源，但它不是合并，而是整合，也就是说，assets文件的处理方式跟java文件的处理方式是一样的 解决方案是使用sourceSets

//    sourceSets {
//        main {
//            manifest.srcFile 'AndroidManifest.xml'
//            aidl.srcDirs = []
//            assets.srcDirs = ['src/main/assets']
//            java.srcDirs = []
//            jni.srcDirs = []
//            renderscript.srcDirs = []
//            res.srcDirs = []
//            resources.srcDirs = []
//            jniLibs.srcDirs = []
//        }
//        mimi {
//
//        }
//    sourceSets.all { sourceSet ->
//        // println("sourceSet.name = ${sourceSet.name}")
//        if (sourceSet.name.contains('Debug') || sourceSet.name.contains('Release')) {
//            if (sourceSet.name.contains("china")
//                    || sourceSet.name.contains("a")
//                    || sourceSet.name.contains("b")
//                    || ...) {
//                sourceSet.assets.srcDirs = ['src/free/assets']
//            }
//        }
//    }


//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'LICENSE'
//        pickFirst 'lib/x86/libc++_shared.so'
//        pickFirst 'lib/x86_64/libc++_shared.so'
//        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
//        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }
}

project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = [
                "-Xjsr305=strict",
                "-progressive"
        ]
        jvmTarget = "1.8"
    }
}

def getAPI_Host(String buildtype) {
    def path = "http://api.vsense.dev-121.silkrode.io"
    switch (buildtype) {
        case "sit":
            path = "http://api.vsense.dev-121.silkrode.io"
            break
        case "dev":
            path = "http://api.vsense.dev-121.silkrode.io"
            break
        case "prod":
        default:
            break
    }
    return path
}

def getAD_API_Host(String buildtype) {
    def path = "http://api.promotion.dev-121.silkrode.io"
    switch (buildtype) {
        case "sit":
        case "dev":
        case "prod":
        default:
            break
    }
    return path
}

def getMQTT_Host(String buildtype) {
    def path = "ws://10.1.1.121:8083"
    switch (buildtype) {
        case "sit":
            path = "wss://mqtt.ymmsp.com:443"
            break
        case "dev":
            path = "ws://10.1.1.121:8083"
            break
        case "prod":
        default:
            break
    }
    return path
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

def isWithSubmoduleBranch() {
    if (gitBranch().contains("dev_sub")) {
        return true
    } else {
        return false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // AndroidX
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.activity:activity-ktx:$activity_ktx_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Lifecycle, ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // KTX Extensions
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_extensions_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ktx_extensions_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$ktx_extensions_version"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_interceptor_version"

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Koin
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.koin:koin-core-ext:$koin_version"
    implementation "org.koin:koin-java:$koin_version"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-scope:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "org.koin:koin-android-ext:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    implementation "org.koin:koin-androidx-ext:$koin_version"

    // Paging
    implementation "androidx.paging:paging-runtime:$paging_version"

    // LiveEventBus
    implementation "com.jeremyliao:live-event-bus-x:$live_event_bus_version"

    // Material Dialogs
    implementation "com.afollestad.material-dialogs:core:$material_dialogs_version"
    implementation "com.afollestad.material-dialogs:lifecycle:$material_dialogs_version"

    // ProgressHUD
    implementation "com.kaopiz:kprogresshud:$pogress_hud_version"

    // Switch Button
    implementation "com.kyleduo.switchbutton:library:$switch_button_version"

    // Swipe refresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh_layout_version"

    // CircleImageView
    implementation "de.hdodenhof:circleimageview:$circle_image_view_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Glide Transformations
    implementation "jp.wasabeef:glide-transformations:$glide_transformations_version"

    // WebSocket
    implementation "org.java-websocket:Java-WebSocket:$websocket_version"

    // MQTT
    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:$mqtt_version"
    implementation "org.eclipse.paho:org.eclipse.paho.android.service:$paho_service_version"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$local_broadcast_manager_version"

    // Security-Crypto
    implementation "androidx.security:security-crypto:$security_crypto_version"

    // Stetho
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"
    implementation "com.facebook.stetho:stetho-js-rhino:$stetho_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Flurry
    implementation "com.flurry.android:analytics:$flurry_version"

    // AndroidUtilCode
    implementation "com.blankj:utilcodex:$utilcodex_version"

    // Viewpager2
    implementation "androidx.viewpager2:viewpager2:$viewpager2_version"
    implementation 'com.to.aboomy:pager2banner:0.0.5'

    // RoundedView
    implementation "com.github.yulichswift:RoundedViews:$rounded_views_version"

    // ExoPlayer
    implementation "com.google.android.exoplayer:exoplayer:$exoplayer_version"
    implementation "com.google.android.exoplayer:extension-rtmp:$exoplayer_version"

    // BaseRecyclerViewAdapterHelper
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:$base_recycler_view_adapter_helper_version"

    // Domain GoLib
    implementation project(path: ':domain_libs')

    // Video Editor
//    implementation project(path: ':video-editor')
    implementation 'org.cks.utils.video:video-editor:0.0.0'
    implementation 'org.cks.ffmpeg:FFmpegAndroid:0.3.3'

    //Video compressor
//    implementation project(path: ':videocompressor')
    implementation 'org.cks.utils.video:videocompressor:0.0.0'

    // Application Provider
    implementation "com.github.florent37:applicationprovider:$application_provider_version"

    // Work
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // Epoxy
    implementation "com.airbnb.android:epoxy:$epoxy_version"
    kapt "com.airbnb.android:epoxy-processor:$epoxy_version"

    implementation "org.conscrypt:conscrypt-android:$conscrypt_version"

//    // Log
//    if (isWithSubmoduleBranch()) {
//        println "sub_project dep !!  "
//        implementation project(path: ':BaseManager')
//        implementation project(path: ':DeviceInfoProvider')
//        implementation project(path: ':logmanager')
//        implementation project(path: ':utils_device')
//        implementation project(path: ':utils_api_result')
//        implementation project(path: ':utils_general')
//        implementation project(path: ':utils_loglevel')
//        implementation project(path: ':utils_gson_factory')
//    } else {
        implementation "org.cks.utils:BaseManager:$cks_log_version"
        implementation "org.cks.utils:DeviceInfoProvider:$cks_provider"
        implementation "org.cks.utils:logmanager:$cks_log_version"
        implementation "org.cks.utils:utils_device:$cks_utils"
        implementation "org.cks.utils:utils_api_result:$cks_utils"
        implementation "org.cks.utils:utils_general:$cks_utils"
        implementation "org.cks.utils:utils_loglevel:$cks_utils"
        implementation "org.cks.utils:utils_gson_factory:$cks_utils"
        implementation "org.cks.utils:updatemanager:$cks_update_version"
//    }

    // Test
    testImplementation "io.mockk:mockk:$mokk_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.koin:koin-test:$koin_version"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "androidx.paging:paging-common:$paging_version"
    testImplementation "androidx.arch.core:core-testing:$core_testing"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mock_webserver_version"
    androidTestImplementation "androidx.test:runner:$runner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "io.mockk:mockk-android:$mokk_version"
    androidTestImplementation "androidx.test:core:$android_test_version"
    androidTestImplementation "androidx.test:runner:$android_test_version"
    androidTestImplementation "androidx.test:rules:$android_test_version"
    androidTestImplementation "androidx.test.ext:junit:$android_test_ext_version"
}

class Version {
    def versionCode
    def versionName
}

def getVersionPropertiesPath(String flavor) {
    def path = "version.properties"
    switch (flavor) {
        case "mimi":
            path = "./src/mimi/version.properties"
            break
    }
    return path
}

Version readVersion() {
    readVersionWithPath('version.properties')
}

Version readVersionWithPath(String version_properties_path) {
    Properties defaultVersionProps = new Properties()
    def pfile = file(version_properties_path)
    if (!pfile.exists()) {
        pfile = file('version.properties')
    }
    defaultVersionProps.load(new FileInputStream(pfile))
    def defaultBuildVersionCode = defaultVersionProps['VERSION_CODE']
    def defaultBuildVersionName = defaultVersionProps['VERSION_NAME_PREFIX'] + "." + defaultVersionProps['VERSION_NAME_BUILD']
    return new Version(versionCode: defaultBuildVersionCode, versionName: defaultBuildVersionName)
}

def increaseVersion() {
    increaseVersionWithPath('version.properties')
}

def increaseVersionWithPath(String version_properties_path) {
    Properties versionProps = new Properties()
    def pfile = file(version_properties_path)
    if (!pfile.exists()) {
        pfile = file('version.properties')
    }
    versionProps.load(new FileInputStream(pfile))
    def hotfix = versionProps['VERSION_NAME_HOTFIX'].toInteger()
    def nextCode = versionProps['VERSION_CODE'].toInteger() -hotfix + 10
    versionProps['VERSION_CODE'] = nextCode.toString()
    def nextBuild = versionProps['VERSION_NAME_BUILD'].toInteger() + 1
    versionProps['VERSION_NAME_BUILD'] = nextBuild.toString()
    hotfix = 0
    versionProps['VERSION_NAME_HOTFIX'] = hotfix.toString()
    versionProps.store(pfile.newWriter(), null)
    def buildVersionName = versionProps['VERSION_NAME_PREFIX'] + "." + versionProps['VERSION_NAME_BUILD']
    println "Increase $buildVersionName"
}

task increaseVersion {
    doLast {
        increaseVersion()
    }
}
